{"version":3,"sources":["components/Title.js","components/BookShelves.js","components/BookShelf.js","BooksAPI.js","App.js","index.js"],"names":["Title","react_default","a","createElement","className","BookShelves","_ref","books","updateBookShelf","currentlyReading","filter","book","shelf","wantToRead","read","components_BookShelf","title","changeBookShelf","BookShelf","map","key","id","style","width","height","backgroundImage","concat","url","defaultValue","onChange","event","target","value","disabled","author","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","BooksApp","useEffect","fetch","then","res","json","data","console","log","_useState","useState","_useState2","Object","slicedToArray","showSearchPage","setShowSearchPage","_useState3","_useState4","setBooks","onClick","type","placeholder","components_Title","components_BookShelves","updatBooks","b","_this","setState","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.57804146.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Title = () => {\r\n\r\n    return (\r\n        <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Title;","import React from 'react';\r\nimport BookShelf from './BookShelf';\r\nimport BookShelfChanger from './BookShelfChanger';\r\n\r\n\r\nconst BookShelves = ({ books, updateBookShelf }) => {\r\n\r\n    const currentlyReading = books.filter((book) => book.shelf === \"currentlyReading\");\r\n    const wantToRead = books.filter((book) => book.shelf === \"wantToRead\");\r\n    const read = books.filter((book) => book.shelf === \"read\");\r\n\r\n\r\n    return (\r\n        <div>\r\n            <BookShelf title=\"Currently Reading\" books={currentlyReading} changeBookShelf={updateBookShelf}/>\r\n            <BookShelf title=\"Want To Read\" books={wantToRead} changeBookShelf={updateBookShelf}/>\r\n            <BookShelf title=\"Read\" books={read} changeBookShelf={updateBookShelf}/>   \r\n        </div>\r\n   \r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BookShelves;","import React from 'react';\r\nimport BookShelfChanger from './BookShelfChanger';\r\nimport BookShelves from './BookShelves';\r\n//import propTypes from 'prop-types';\r\n\r\nconst BookShelf = ({ books, title, changeBookShelf}) => {\r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{title}</h2>\r\n            <div className=\"bookshelf-books\">{\r\n                books.map((book) => (\r\n                    <ol className=\"books-grid\">\r\n                        <li key={book.id}>\r\n                            <div className=\"book\">\r\n                                <div className=\"book-top\">\r\n                                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.url})` }}></div>\r\n                                    <div className=\"book-shelf-changer\">\r\n                                        <select defaultValue={book.shelf} onChange={(event) => changeBookShelf(book, event.target.value)} >\r\n                                            <option value=\"move\" disabled>Move to...</option>\r\n                                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                                            <option value=\"wantToRead\">Want to Read</option>\r\n                                            <option value=\"read\">Read</option>\r\n                                            <option value=\"none\">None</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"book-title\">{book.title}</div>\r\n                                <div className=\"book-authors\">{book.author}</div>\r\n                            </div>\r\n                        </li>\r\n\r\n                        {/* <li>\r\n                      <div className=\"book\">\r\n                        <div className=\"book-top\">\r\n                          <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: 'url(\"http://books.google.com/books/content?id=yDtCuFHXbAYC&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE72RRiTR6U5OUg3IY_LpHTL2NztVWAuZYNFE8dUuC0VlYabeyegLzpAnDPeWxE6RHi0C2ehrR9Gv20LH2dtjpbcUcs8YnH5VCCAH0Y2ICaKOTvrZTCObQbsfp4UbDqQyGISCZfGN&source=gbs_api\")' }}></div>\r\n                          <div className=\"book-shelf-changer\">\r\n                            <select>\r\n                              <option value=\"move\" disabled>Move to...</option>\r\n                              <option value=\"currentlyReading\">Currently Reading</option>\r\n                              <option value=\"wantToRead\">Want to Read</option>\r\n                              <option value=\"read\">Read</option>\r\n                              <option value=\"none\">None</option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"book-title\">Ender's Game</div>\r\n                        <div className=\"book-authors\">Orson Scott Card</div>\r\n                      </div>\r\n                    </li> */}\r\n                    </ol>\r\n                ))\r\n            }\r\n\r\n            </div>\r\n        </div>\r\n\r\n        // <div className=\"bookshelf-books\">\r\n        //     <ol className=\"books-grid\">\r\n        //         <li>\r\n        //             <div className=\"book\">\r\n        //     <div className=\"book-top\">\r\n        //       <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.url})`}}></div>\r\n        //       <div className=\"book-shelf-changer\">\r\n        //         <select>\r\n        //           <option value=\"move\" disabled>Move to...</option>\r\n        //           <option value=\"currentlyReading\">Currently Reading</option>\r\n        //           <option value=\"wantToRead\">Want to Read</option>\r\n        //           <option value=\"read\">Read</option>\r\n        //           <option value=\"none\">None</option>\r\n        //         </select>\r\n        //       </div>\r\n        //     </div>\r\n        //     <div className=\"book-title\">{book.title}</div>\r\n        //     <div className=\"book-authors\">{book.author}</div>\r\n        //   </div>\r\n\r\n\r\n        //             {/* {books.map(b => ( */}\r\n        //             {/* <BookShelfChanger book={b}/> */}\r\n        //             {/* ))} */}\r\n        //         </li>\r\n        //     </ol>\r\n        // </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n// BookShelf.PropTypes={\r\n//     books: propTypes.array.isRequired,\r\n// }\r\n\r\nexport default BookShelf;","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { useState, useEffect } from 'react'\r\nimport Title from './components/Title'\r\nimport BookShelf from './components/BookShelf'\r\nimport BookShelves from './components/BookShelves'\r\nimport BookShelfChanger from './components/BookShelfChanger'\r\n\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\n\r\nconst BooksApp = () => {\r\n\r\n  /**\r\n   * TODO: Instead of using this state variable to keep track of which page\r\n   * we're on, use the URL in the browser's address bar. This will ensure that\r\n   * users can use the browser's back and forward buttons to navigate between\r\n   * pages, as well as provide a good URL they can bookmark and share.\r\n   */\r\n  useEffect(() => {\r\n\r\n    BooksAPI.getAll()\r\n      .then(data => console.log());\r\n  }, [])\r\n\r\n  const initialBooks = [\r\n    {\r\n      id: 1,\r\n      url: \"http://books.google.com/books/content?id=PGR2AwAAQBAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73-GnPVEyb7MOCxDzOYF1PTQRuf6nCss9LMNOSWBpxBrz8Pm2_mFtWMMg_Y1dx92HT7cUoQBeSWjs3oEztBVhUeDFQX6-tWlWz1-feexS0mlJPjotcwFqAg6hBYDXuK_bkyHD-y&source=gbs_api\",\r\n      title: \"To Kill a Mockingbird\",\r\n      author: \"Harper Lee\",\r\n      shelf: \"currentlyReading\",\r\n\r\n    },\r\n    {\r\n      id: 2,\r\n      url: \"http://books.google.com/books/content?id=uu1mC6zWNTwC&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73pGHfBNSsJG9Y8kRBpmLUft9O4BfItHioHolWNKOdLavw-SLcXADy3CPAfJ0_qMb18RmCa7Ds1cTdpM3dxAGJs8zfCfm8c6ggBIjzKT7XR5FIB53HHOhnsT7a0Cc-PpneWq9zX&source=gbs_api\",\r\n      title: \"1776\",\r\n      author: \"David McCullough\",\r\n      shelf: \"wantToRead\",\r\n\r\n    },\r\n    {\r\n      id: 3,\r\n      url: \"http://books.google.com/books/content?id=1q_xAwAAQBAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE712CA0cBYP8VKbEcIVEuFJRdX1k30rjLM29Y-dw_qU1urEZ2cQ42La3Jkw6KmzMmXIoLTr50SWTpw6VOGq1leINsnTdLc_S5a5sn9Hao2t5YT7Ax1RqtQDiPNHIyXP46Rrw3aL8&source=gbs_api\",\r\n      title: \"The Adventures of Tom Sawyer\",\r\n      author: \"MarkTwain\",\r\n      shelf: \"read\",\r\n\r\n    }\r\n  ]\r\n\r\n  const [showSearchPage, setShowSearchPage] = useState(false);\r\n\r\n  const [books, setBooks] = useState(initialBooks)\r\n\r\n  const updateBookShelf = (book, shelf) => {\r\n    const updatBooks = books.map(b => {\r\n      if (b.id == book.id) {\r\n        book.shelf = shelf;\r\n        return book;\r\n      }\r\n      return b;\r\n    })\r\n    setBooks(updatBooks);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showSearchPage ? (\r\n        <div className=\"search-books\">\r\n          <div className=\"search-books-bar\">\r\n            <button className=\"close-search\" onClick={() => setShowSearchPage(false)}>Close</button>\r\n            <div className=\"search-books-input-wrapper\">\r\n              {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n              <input type=\"text\" placeholder=\"Search by title or author\" />\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\"></ol>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"list-books\">\r\n          <Title />\r\n          <div className=\"list-books-content\">\r\n            <BookShelves books={books} updateBookShelf={updateBookShelf} />\r\n\r\n          </div>\r\n          <div className=\"open-search\">\r\n            <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}